n <- 1000
subpopulations <- c("A", "B")
treatments <- c("X", "Y")
data <- expand.grid(subpopulation = subpopulations, treatment = treatments, id = 1:n) %>%
mutate(
outcome = case_when(
subpopulation == "A" & treatment == "X" ~ rnorm(n, mean = 5, sd = 1),
subpopulation == "A" & treatment == "Y" ~ rnorm(n, mean = 6, sd = 1),
subpopulation == "B" & treatment == "X" ~ rnorm(n, mean = 7, sd = 1),
subpopulation == "B" & treatment == "Y" ~ rnorm(n, mean = 8, sd = 1)
)
)
data <- expand.grid(
subpopulation = subpopulations,
treatment = treatments,
stringsAsFactors = FALSE
) %>%
mutate(
mean = case_when(
subpopulation == "S1" & treatment == "A" ~ mu_A_S1,
subpopulation == "S1" & treatment == "B" ~ mu_B_S1,
subpopulation == "S2" & treatment == "A" ~ mu_A_S2,
subpopulation == "S2" & treatment == "B" ~ mu_B_S2
),
sd = sd
)
library(dplyr)
set.seed(123)
n <- 1000
mu_A_S1 <- 5
mu_A_S2 <- 6
mu_B_S1 <- 7
mu_B_S2 <- 8
sd <- 1
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
data <- expand.grid(
subpopulation = subpopulations,
treatment = treatments,
stringsAsFactors = FALSE
) %>%
mutate(
mean = case_when(
subpopulation == "S1" & treatment == "A" ~ mu_A_S1,
subpopulation == "S1" & treatment == "B" ~ mu_B_S1,
subpopulation == "S2" & treatment == "A" ~ mu_A_S2,
subpopulation == "S2" & treatment == "B" ~ mu_B_S2
),
sd = sd
)
data
# Simulate
data <- data.frame(
subpopulation = rep(subpopulations, each = n * length(treatments)),
treatment = rep(treatments, times = n * length(subpopulations)),
value = c(
rnorm(n, mean = mu_A_S1, sd = sd),
rnorm(n, mean = mu_B_S1, sd = sd),
rnorm(n, mean = mu_A_S2, sd = sd),
rnorm(n, mean = mu_B_S2, sd = sd)
)
)
data
overall_data <- data %>%
group_by(treatment) %>%
summarise(mean_value = mean(value), .groups = 'drop')
overall_data
overall_data <- data %>%
group_by(subpopulation, treatment) %>%
summarise(mean_value = mean(value), .groups = 'drop')
overall_data
library(dplyr)
set.seed(123)
n <- 10000
mu_A_S1 <- 5
mu_A_S2 <- 6
mu_B_S1 <- 7
mu_B_S2 <- 8
sd <- 1
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
# Simulate
data <- data.frame(
subpopulation = rep(subpopulations, each = n * length(treatments)),
treatment = rep(treatments, times = n * length(subpopulations)),
value = c(
rnorm(n, mean = mu_A_S1, sd = sd),
rnorm(n, mean = mu_B_S1, sd = sd),
rnorm(n, mean = mu_A_S2, sd = sd),
rnorm(n, mean = mu_B_S2, sd = sd)
)
)
data
overall_data <- data %>%
group_by(subpopulation, treatment) %>%
summarise(mean_value = mean(value), .groups = 'drop')
overall_data
library(dplyr)
set.seed(123)
n <- 1000
mu_A_S1 <- 5
mu_A_S2 <- 6
mu_B_S1 <- 7
mu_B_S2 <- 8
sd <- 1
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
# Simulate
data <- data.frame(
subpopulation = rep(subpopulations, each = n * length(treatments)),
treatment = rep(treatments, times = n * length(subpopulations)),
value = c(
rnorm(n, mean = mu_A_S1, sd = sd),
rnorm(n, mean = mu_B_S1, sd = sd),
rnorm(n, mean = mu_A_S2, sd = sd),
rnorm(n, mean = mu_B_S2, sd = sd)
)
)
data
overall_data <- data %>%
group_by(subpopulation, treatment) %>%
summarise(mean_value = mean(value), .groups = 'drop')
overall_data
trt_effects <- overall_data %>%
group_by(subpopulation) %>%
summarise(
effect_A = mean(mean_value[treatment == "A"]),
effect_B = mean(mean_value[treatment == "B"]),
.groups = 'drop'
) %>%
mutate(effect_diff = effect_B - effect_A)
trt_effects
trt_effects <- overall_data %>%
group_by(subpopulation)%>%
mutate(effect_diff = effect_B - effect_A)
trt_effects <- overall_data %>%
group_by(subpopulation)%>%
mutate(effect_diff = mean(mean_value[treatment == "A"]) - mean(mean_value[treatment == "B"]))
trt
trt_effects
trt_effects <- overall_data %>%
group_by(subpopulation)%>%
drop(treatment) %>%
mutate(effect_diff = mean(mean_value[treatment == "A"]) - mean(mean_value[treatment == "B"]))
trt_effects
trt_effects <- overall_data %>%
group_by(treatment) %>%
summarise(mean_value = mean(mean_value), .groups = 'drop') %>%
mutate(effect = mean_value - mean_value[1]) %>%
select(treatment, effect)
trt_effects
overall_data
library(dplyr)
set.seed(123)
n <- 1000
lambda <- 0.6
mu_A_S1 <- 5
mu_A_S2 <- 6
mu_B_S1 <- 7
mu_B_S2 <- 8
sd <- 1
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
# Simulate
data <- data.frame(
subpopulation = rep(subpopulations, each = n * length(treatments)),
treatment = rep(treatments, times = n * length(subpopulations)),
value = c(
rnorm(n*lambda, mean = mu_A_S1, sd = sd),
rnorm(n*lambda, mean = mu_B_S1, sd = sd),
rnorm(n*(1-lambda), mean = mu_A_S2, sd = sd),
rnorm(n*(1-lambda), mean = mu_B_S2, sd = sd)
)
)
data
library(dplyr)
set.seed(123)
n <- 1000
lambda <- 0.6
n1 <- n * lambda
n2 <- n * (1 - lambda)
mu_A_S1 <- 5
mu_A_S2 <- 6
mu_B_S1 <- 7
mu_B_S2 <- 8
sd <- 1
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S1 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
library(dplyr)
set.seed(123)
n <- 1000
lambda <- 0.6
n1 <- n * lambda
n2 <- n * (1 - lambda)
mu_A_S1 <- 5
mu_A_S2 <- 6
mu_B_S1 <- 7
mu_B_S2 <- 8
sd <- 1
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
n1/2+n1/2+n2/2+n2/2
knitr::opts_chunk$set(echo = TRUE)
simulate_trial <- function(n, lambda, mu_A_S1, mu_A_S2, mu_B_S1, mu_B_S2, sd) {
n1 <- n * lambda
n2 <- n * (1 - lambda)
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
return(list(A_S1 = A_S1, B_S1 = B_S1, A_S2 = A_S2, B_S2 = B_S2))
}
return(list(A_S1 = A_S1, B_S1 = B_S1, A_S2 = A_S2, B_S2 = B_S2))
Trial_Std  <- function(n, lambda, mu_A_S1, mu_A_S2, mu_B_S1, mu_B_S2, sd) {
# n: total sample size
n1 <- n * lambda
n2 <- n * (1 - lambda)
# Realisations for subpopulation 1
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
# Realisations for subpopulation 2
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
return(list(A_S1 = A_S1, B_S1 = B_S1, A_S2 = A_S2, B_S2 = B_S2))
}
# Calculate trt effects
calculate_thetas <- function(A_S1, B_S1, A_S2, B_S2, lambda) {
# Means for subpopulation 1
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
# Means for subpopulation 2
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
# Treatment effects
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
return(list(theta1 = theta1, theta2 = theta2, theta3 = theta3))
}
z1 <- (sqrt(lambda*n)*theta1)/(2*sd)
z3 <- (sqrt(n)*theta3)/(2*sd)
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
z1
z3
p1
p3
# Simple 2 arm trial
# Common variance
# 2 subpopulations
Trial_Std  <- function(n, lambda, mu_A_S1, mu_A_S2, mu_B_S1, mu_B_S2, sd) {
# n: total sample size
n1 <- n * lambda
n2 <- n * (1 - lambda)
# Realisations for subpopulation 1
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
# Realisations for subpopulation 2
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
return(list(A_S1 = A_S1, B_S1 = B_S1, A_S2 = A_S2, B_S2 = B_S2))
}
# Calculate trt effects
calculate_thetas <- function(A_S1, B_S1, A_S2, B_S2, lambda) {
# Means for subpopulation 1
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
# Means for subpopulation 2
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
# Treatment effects
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
return(list(theta1 = theta1, theta2 = theta2, theta3 = theta3))
}
# Calculate Z and P values
calculate_zvals <- function(theta1, theta3, n, lambda, sd) {
z1 <- (sqrt(lambda * n) * theta1) / (2 * sd)
z3 <- (sqrt(n) * theta3) / (2 * sd)
return(list(z1 = z1, z3 = z3))
}
calculate_p_vals <- function(z1, z3) {
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
return(list(p1 = p1, p3 = p3))
}
# Simes method
simes_method <- function(p1, p3) {
p13 <- min(2*min(p1,p3),max(p1, p3))
return(p13)
}
library(dplyr)
set.seed(123)
n <- 200
lambda <- 0.5
n1 <- n * lambda
n2 <- n * (1 - lambda)
mu_A_S1 <- 5
mu_A_S2 <- 15
mu_B_S1 <- 6
mu_B_S2 <- 16
sd <- 22
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
# Make the above into a function
simulate_trial <- function(n, lambda, mu_A_S1, mu_A_S2, mu_B_S1, mu_B_S2, sd) {
n1 <- n * lambda
n2 <- n * (1 - lambda)
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
return(list(A_S1 = A_S1, B_S1 = B_S1, A_S2 = A_S2, B_S2 = B_S2))
}
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
# make the above into a function
calculate_thetas <- function(A_S1, B_S1, A_S2, B_S2, lambda) {
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
return(list(theta1 = theta1, theta2 = theta2, theta3 = theta3))
}
z1 <- (sqrt(lambda*n)*theta1)/(2*sd)
z3 <- (sqrt(n)*theta3)/(2*sd)
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
# make the above into a function
calculate_z_p <- function(theta1, theta3, n, lambda, sd) {
z1 <- (sqrt(lambda * n) * theta1) / (2 * sd)
z3 <- (sqrt(n) * theta3) / (2 * sd)
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
return(list(z1 = z1, z3 = z3, p1 = p1, p3 = p3))
}
simes_method <- function(p1, p3) {
p13 <- min(2*min(p1,p3),max(p1, p3))
return(p13)
}
z1
z3
p1
p3
simes_method(p1, p2)
simes_method(p1, p3)
library(dplyr)
set.seed(123)
n <- 200
lambda <- 0.5
n1 <- n * lambda
n2 <- n * (1 - lambda)
mu_A_S1 <- 0
mu_A_S2 <- 15
mu_B_S1 <- 5
mu_B_S2 <- 10
sd <- 22
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
# Make the above into a function
simulate_trial <- function(n, lambda, mu_A_S1, mu_A_S2, mu_B_S1, mu_B_S2, sd) {
n1 <- n * lambda
n2 <- n * (1 - lambda)
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
return(list(A_S1 = A_S1, B_S1 = B_S1, A_S2 = A_S2, B_S2 = B_S2))
}
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
# make the above into a function
calculate_thetas <- function(A_S1, B_S1, A_S2, B_S2, lambda) {
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
return(list(theta1 = theta1, theta2 = theta2, theta3 = theta3))
}
z1 <- (sqrt(lambda*n)*theta1)/(2*sd)
z3 <- (sqrt(n)*theta3)/(2*sd)
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
# make the above into a function
calculate_z_p <- function(theta1, theta3, n, lambda, sd) {
z1 <- (sqrt(lambda * n) * theta1) / (2 * sd)
z3 <- (sqrt(n) * theta3) / (2 * sd)
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
return(list(z1 = z1, z3 = z3, p1 = p1, p3 = p3))
}
simes_method <- function(p1, p3) {
p13 <- min(2*min(p1,p3),max(p1, p3))
return(p13)
}
simes_method(p1, p3)
z1
z3
mu_hat_A_S1
mu_hat_B_S1
mu_hat_A_S2
mu_hat_B_S2
theta1
theta3
library(dplyr)
set.seed(123)
n <- 200
lambda <- 0.5
n1 <- n * lambda
n2 <- n * (1 - lambda)
mu_A_S1 <- 10
mu_A_S2 <- 10
mu_B_S1 <- 0
mu_B_S2 <- 0
sd <- 22
subpopulations <- c("S1", "S2")
treatments <- c("A", "B")
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
# Make the above into a function
simulate_trial <- function(n, lambda, mu_A_S1, mu_A_S2, mu_B_S1, mu_B_S2, sd) {
n1 <- n * lambda
n2 <- n * (1 - lambda)
A_S1 <- rnorm(n1/2, mean = mu_A_S1, sd = sd)
B_S1 <- rnorm(n1/2, mean = mu_B_S1, sd = sd)
A_S2 <- rnorm(n2/2, mean = mu_A_S2, sd = sd)
B_S2 <- rnorm(n2/2, mean = mu_B_S2, sd = sd)
return(list(A_S1 = A_S1, B_S1 = B_S1, A_S2 = A_S2, B_S2 = B_S2))
}
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
# make the above into a function
calculate_thetas <- function(A_S1, B_S1, A_S2, B_S2, lambda) {
mu_hat_A_S1 <- mean(A_S1)
mu_hat_B_S1 <- mean(B_S1)
mu_hat_A_S2 <- mean(A_S2)
mu_hat_B_S2 <- mean(B_S2)
theta1 <- mu_hat_A_S1 - mu_hat_B_S1
theta2 <- mu_hat_A_S2 - mu_hat_B_S2
theta3 <- lambda * theta1 + (1 - lambda) * theta2
return(list(theta1 = theta1, theta2 = theta2, theta3 = theta3))
}
z1 <- (sqrt(lambda*n)*theta1)/(2*sd)
z3 <- (sqrt(n)*theta3)/(2*sd)
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
# make the above into a function
calculate_z_p <- function(theta1, theta3, n, lambda, sd) {
z1 <- (sqrt(lambda * n) * theta1) / (2 * sd)
z3 <- (sqrt(n) * theta3) / (2 * sd)
p1 <- 1 - pnorm(z1)
p3 <- 1 - pnorm(z3)
return(list(z1 = z1, z3 = z3, p1 = p1, p3 = p3))
}
simes_method(p1, p3)
mu_hat_A_S1
mu_hat_B_S1
mu_hat_A_S2
mu_hat_B_S2
p1
p3
